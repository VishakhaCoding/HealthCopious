<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="CopiousCare" failures="0" tests="54" name="pivotalApplication.CreatePediatricPatient" time="20.912" errors="1" timestamp="2024-09-02T16:28:45 IST" skipped="53">
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="setup1" time="20.912">
    <error message="Could not start a new session. Response code 500. Message: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20000ms 
Host info: host: &#039;COPIOUSCARE&#039;, ip: &#039;192.168.210.150&#039;
Build info: version: &#039;4.13.0&#039;, revision: &#039;ba948ece5b*&#039;
System info: os.name: &#039;Windows 11&#039;, os.arch: &#039;amd64&#039;, os.version: &#039;10.0&#039;, java.version: &#039;17.0.10&#039;
Driver info: io.appium.java_client.AppiumDriver
Command: [null, newSession {capabilities=[{appium:app=C:\pivotalapp-stage-vishakha.apk, appium:appActivity=com.calculator_apps.MainActivity, appium:appPackage=com.calculator_apps, appium:automationName=UiAutomator2, appium:deviceName=samsung, appium:newCommandTimeout=120000, appium:noReset=false, platformName=ANDROID, appium:platformVersion=11, appium:–session-override=true}], desiredCapabilities=Capabilities {app: C:\pivotalapp-stage-vishakh..., appActivity: com.calculator_apps.MainAct..., appPackage: com.calculator_apps, automationName: UiAutomator2, deviceName: samsung, newCommandTimeout: 120000, noReset: false, platformName: ANDROID, platformVersion: 11, –session-override: true}}]
Capabilities {app: C:\pivotalapp-stage-vishakh..., appActivity: com.calculator_apps.MainAct..., appPackage: com.calculator_apps, automationName: UiAutomator2, deviceName: samsung, newCommandTimeout: 120000, noReset: false, platformName: ANDROID, platformVersion: 11, –session-override: true}" type="org.openqa.selenium.SessionNotCreatedException">
      <![CDATA[org.openqa.selenium.SessionNotCreatedException: Could not start a new session. Response code 500. Message: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20000ms 
Host info: host: 'COPIOUSCARE', ip: '192.168.210.150'
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: io.appium.java_client.AppiumDriver
Command: [null, newSession {capabilities=[{appium:app=C:\pivotalapp-stage-vishakha.apk, appium:appActivity=com.calculator_apps.MainActivity, appium:appPackage=com.calculator_apps, appium:automationName=UiAutomator2, appium:deviceName=samsung, appium:newCommandTimeout=120000, appium:noReset=false, platformName=ANDROID, appium:platformVersion=11, appium:–session-override=true}], desiredCapabilities=Capabilities {app: C:\pivotalapp-stage-vishakh..., appActivity: com.calculator_apps.MainAct..., appPackage: com.calculator_apps, automationName: UiAutomator2, deviceName: samsung, newCommandTimeout: 120000, noReset: false, platformName: ANDROID, platformVersion: 11, –session-override: true}}]
Capabilities {app: C:\pivotalapp-stage-vishakh..., appActivity: com.calculator_apps.MainAct..., appPackage: com.calculator_apps, automationName: UiAutomator2, deviceName: samsung, newCommandTimeout: 120000, noReset: false, platformName: ANDROID, platformVersion: 11, –session-override: true}
at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:140)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.appium.java_client.remote.AppiumProtocolHandshake.createSession(AppiumProtocolHandshake.java:133)
at io.appium.java_client.remote.AppiumProtocolHandshake.createSession(AppiumProtocolHandshake.java:102)
at io.appium.java_client.remote.AppiumCommandExecutor.createSession(AppiumCommandExecutor.java:182)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:250)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at io.appium.java_client.AppiumDriver.startSession(AppiumDriver.java:274)
at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:163)
at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:89)
at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:101)
at pivotalApplication.CreatePediatricPatient.setup1(CreatePediatricPatient.java:49)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:176)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:122)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- setup1 -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BfSuite" time="0.000">
    <skipped/>
  </testcase> <!-- BfSuite -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="NumberField" time="0.000">
    <skipped/>
  </testcase> <!-- NumberField -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="IAgree" time="0.000">
    <skipped/>
  </testcase> <!-- IAgree -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="proceedButton" time="0.000">
    <skipped/>
  </testcase> <!-- proceedButton -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="OTP" time="0.000">
    <skipped/>
  </testcase> <!-- OTP -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="submit" time="0.000">
    <skipped/>
  </testcase> <!-- submit -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Createptient" time="0.000">
    <skipped/>
  </testcase> <!-- Createptient -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="MobileNumber1" time="0.000">
    <skipped/>
  </testcase> <!-- MobileNumber1 -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="confirm" time="0.000">
    <skipped/>
  </testcase> <!-- confirm -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="confirmPopup" time="0.000">
    <skipped/>
  </testcase> <!-- confirmPopup -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="AdditionalNumber1" time="0.000">
    <skipped/>
  </testcase> <!-- AdditionalNumber1 -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="FirstName" time="0.000">
    <skipped/>
  </testcase> <!-- FirstName -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="MiddleName" time="0.000">
    <skipped/>
  </testcase> <!-- MiddleName -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="LastName" time="0.000">
    <skipped/>
  </testcase> <!-- LastName -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BirthCalender" time="0.000">
    <skipped/>
  </testcase> <!-- BirthCalender -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Birthok" time="0.000">
    <skipped/>
  </testcase> <!-- Birthok -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="GenFemale" time="0.000">
    <skipped/>
  </testcase> <!-- GenFemale -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Address" time="0.000">
    <skipped/>
  </testcase> <!-- Address -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Area" time="0.000">
    <skipped/>
  </testcase> <!-- Area -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="City" time="0.000">
    <skipped/>
  </testcase> <!-- City -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="PinCode" time="0.000">
    <skipped/>
  </testcase> <!-- PinCode -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Next" time="0.000">
    <skipped/>
  </testcase> <!-- Next -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="ContinueProfile" time="0.000">
    <skipped/>
  </testcase> <!-- ContinueProfile -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="TypeOfDelivery" time="0.000">
    <skipped/>
  </testcase> <!-- TypeOfDelivery -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="TypeOfDeliveryNormal" time="0.000">
    <skipped/>
  </testcase> <!-- TypeOfDeliveryNormal -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="weightl" time="0.000">
    <skipped/>
  </testcase> <!-- weightl -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Heightl" time="0.000">
    <skipped/>
  </testcase> <!-- Heightl -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="HC" time="0.000">
    <skipped/>
  </testcase> <!-- HC -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="CC" time="0.000">
    <skipped/>
  </testcase> <!-- CC -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BPSYS" time="0.000">
    <skipped/>
  </testcase> <!-- BPSYS -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BPDia" time="0.000">
    <skipped/>
  </testcase> <!-- BPDia -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BloodGroup" time="0.000">
    <skipped/>
  </testcase> <!-- BloodGroup -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BloodGroupA" time="0.000">
    <skipped/>
  </testcase> <!-- BloodGroupA -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="BirthHistoryNext" time="0.000">
    <skipped/>
  </testcase> <!-- BirthHistoryNext -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="MedicalConditionAdd" time="0.000">
    <skipped/>
  </testcase> <!-- MedicalConditionAdd -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="MedicalConditionSelect" time="0.000">
    <skipped/>
  </testcase> <!-- MedicalConditionSelect -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="AddMedicalCondition" time="0.000">
    <skipped/>
  </testcase> <!-- AddMedicalCondition -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Allergies" time="0.000">
    <skipped/>
  </testcase> <!-- Allergies -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Reactions" time="0.000">
    <skipped/>
  </testcase> <!-- Reactions -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="RecurringComplaints" time="0.000">
    <skipped/>
  </testcase> <!-- RecurringComplaints -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="HospitalizationHistory" time="0.000">
    <skipped/>
  </testcase> <!-- HospitalizationHistory -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="HealthHistory" time="0.000">
    <skipped/>
  </testcase> <!-- HealthHistory -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="GeneticdisoredrAdd" time="0.000">
    <skipped/>
  </testcase> <!-- GeneticdisoredrAdd -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="GeneticdisoredrSelect" time="0.000">
    <skipped/>
  </testcase> <!-- GeneticdisoredrSelect -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="AddGeneticdisoredr" time="0.000">
    <skipped/>
  </testcase> <!-- AddGeneticdisoredr -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="OtherEmailId" time="0.000">
    <skipped/>
  </testcase> <!-- OtherEmailId -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="helathNext" time="0.000">
    <skipped/>
  </testcase> <!-- helathNext -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="FathersName" time="0.000">
    <skipped/>
  </testcase> <!-- FathersName -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="MothersName" time="0.000">
    <skipped/>
  </testcase> <!-- MothersName -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Fatherheight" time="0.000">
    <skipped/>
  </testcase> <!-- Fatherheight -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="Mothersheight" time="0.000">
    <skipped/>
  </testcase> <!-- Mothersheight -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="FamailyNedicalHistory" time="0.000">
    <skipped/>
  </testcase> <!-- FamailyNedicalHistory -->
  <system-out/>
  <testcase classname="pivotalApplication.CreatePediatricPatient" name="EnterDisorders" time="0.000">
    <skipped/>
  </testcase> <!-- EnterDisorders -->
  <system-out/>
</testsuite> <!-- pivotalApplication.CreatePediatricPatient -->
